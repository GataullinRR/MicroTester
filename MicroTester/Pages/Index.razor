@page "/"
@inject IMicroTesterClient MicroTester;

@*(header + footer) https://www.codeply.com/go/ouc3hddx5i*@
<CascadingValue Name="@CascadingParameters.IsEnabled" Value="!_isExecuting">
    <div class="container-fluid h-100 d-flex flex-column">
        <div class="row flex-fill" style="min-height:0">
            <div class="col border mh-100" style="overflow-y: scroll; max-width:350px;">
                @foreach (var testCase in _cases)
                {
                    var isSelected = testCase == _selectedCase;
                    var selectionClass = isSelected ? "selected" : "";
                    <div class="py-3 px-1 @selectionClass" @onclick="() => SelectCaseAsync(testCase)">
                        @testCase.Name
                        @if (!_isExecuting || !isSelected)
                        {
                            <InlineButton @onclick="() => RunAsync(testCase)">Execute</InlineButton>
                        }
                        else
                        {
                            if (_cts.IsCancellationRequested)
                            {
                                <span>Cancelling...</span>
                            }
                            else
                            {
                                <CascadingValue Name="@CascadingParameters.IsEnabled" Value="true">
                                    <InlineButton @onclick="() => CancelAsync()">Cancel</InlineButton>
                                </CascadingValue>
                            }
                        }
                    </div>
                }
            </div>

            <div class="col border mh-100" style="overflow-y: scroll;">
                @if (_selectedStep != null)
                {
                    <pre class="wrapped">
<span>@_selectedStep.Request.Headers</span>
<span>@_selectedStep.Request.Body</span>
                    </pre>
                }
            </div>

            <div class="col border mh-100" style="overflow-y: scroll;">
                <HttpResponseView Response="_selectedStep?.Response" />
            </div>

            <div class="col border mh-100" style="overflow-y: scroll;">
                <HttpResponseView Response="_actualResponse" />
            </div>
        </div>
    </div>
</CascadingValue>

@code{ 
        readonly List<TestCase> _cases = new List<TestCase>();
        TestCase? _selectedCase;
        TestCaseStep? _selectedStep;
        HttpResponse? _actualResponse;
        bool _isExecuting;
        System.Threading.CancellationTokenSource _cts = new System.Threading.CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        var request = new ListCasesRequest(0, 30);
        var response = await MicroTester.ListCasesAsync(request);
        _cases.AddRange(response.Cases);
        _selectedCase = _cases.FirstOrDefault();
        _selectedStep = _selectedCase?.Steps?.FirstOrDefault();

        await base.OnInitializedAsync();
    }

    async Task SelectCaseAsync(TestCase testCase)
    {
        _selectedCase = testCase;
        _selectedStep = testCase.Steps.FirstOrDefault();
        _actualResponse = null;
    }

    async Task RunAsync(TestCase testCase)
    {
        try
        {
            _isExecuting = true;
            await SelectCaseAsync(testCase);

            using var client = new HttpClient();
            var dd = new HttpRequestMessage(new HttpMethod(_selectedStep.Request.Method), _selectedStep.Request.URI);
            if (_selectedStep.Request.Body != null)
            {
                dd.Content = new StringContent(_selectedStep.Request.Body);
            }
            dd.Headers.Add("123", "Hello");
            using var response = await client.SendAsync(dd, HttpCompletionOption.ResponseContentRead, _cts.Token);
            var content = await response.Content.ReadAsStringAsync();
            _actualResponse = new HttpResponse(DateTime.UtcNow, "headers", content, content.Length, response.StatusCode, 0);
        }
        finally
        {
            _cts = new System.Threading.CancellationTokenSource();
            _isExecuting = false;
        }
    }

    async Task CancelAsync()
    {
        _cts.Cancel();
    }
}