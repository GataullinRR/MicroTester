@page "/"
@implements IDisposable
@inject IMicroTesterClient MicroTester;
@inject IEventHub EventHub;
@*(header + footer) https://www.codeply.com/go/ouc3hddx5i*@
<CascadingValue Name="@CascadingParameters.IsEnabled" Value="!_isExecuting">
    <div class="container-fluid h-100 d-flex flex-column">
        <div class="row flex-fill" style="min-height:0">
            <div class="col border mh-100" style="overflow-y: scroll; max-width:350px;">
                @foreach (var testCase in _cases)
                {
                    var isSelected = testCase == _selectedCase;
                    var selectionClass = isSelected ? "selected" : "";
                    <div class="py-3 px-1 @selectionClass" @onclick="() => SelectCaseAsync(testCase)">
                        @testCase.Name
                        <span style="float:right">
                            @if (!_isExecuting || !isSelected)
                            {
                                <InlineButton @onclick="() => RunAsync(testCase)">Execute</InlineButton>
                            }
                            else
                            {
                                if (_cts.IsCancellationRequested)
                                {
                                    <span>Cancelling...</span>
                                }
                                else
                                {
                                    <CascadingValue Name="@CascadingParameters.IsEnabled" Value="true">
                                        <InlineButton @onclick="() => CancelAsync()">Cancel</InlineButton>
                                    </CascadingValue>
                                }
                            }

                            <TestCasePinSwitch TestCase="testCase" />
                        </span>
                    </div>
                }
            </div>

            <div class="col border mh-100">
                <div class="container-fluid h-100 d-flex flex-column">
                    <div class="row" style="min-height:0">
                        <div class="col border">
                            <ul class="nav nav-tabs" role="tablist">
                                @foreach (var step in _selectedCase?.Steps ?? new List<TestCaseStep>())
                                {
                                    var activeCalss = step == _selectedStep
                                        ? "active"
                                        : "";
                                    <li class="nav-item">
                                        <a class="nav-link @activeCalss" role="tab" @onclick="() => SelectStepAsync(step)">@step.Name</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>

                    @foreach (var step in _selectedCase?.Steps ?? new List<TestCaseStep>())
                    {
                        var displayClasses = step == _selectedStep
                            ? "show active"
                            : "";
                        @if (step == _selectedStep)
                        {
                            <div class="row flex-fill" style="min-height:0">
                                <div class="col border mh-100" style="overflow-y: scroll;">
                                    <HttpRequestView Request="_selectedStep?.Request" />
                                </div>

                                <div class="col border mh-100" style="overflow-y: scroll;">
                                    <HttpResponseView Response="_selectedStep?.Response" />
                                </div>

                                <div class="col border mh-100" style="overflow-y: scroll;">
                                    <HttpResponseView Response="_actualResponse" />
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</CascadingValue>

@code{
    readonly List<TestCase> _cases = new List<TestCase>();
    TestCase? _selectedCase;
    TestCaseStep? _selectedStep;
    HttpResponse? _actualResponse;
    bool _isExecuting;
    System.Threading.CancellationTokenSource _cts = new System.Threading.CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        EventHub.CasesStateChangedAsync += LoadListAsync;
        await LoadListAsync();

        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        EventHub.CasesStateChangedAsync -= LoadListAsync;
    }

    private async Task LoadListAsync()
    {
        var request = new ListCasesRequest(0, 30);
        var response = await MicroTester.ListCasesAsync(request);
        _cases.Clear();
        _cases.AddRange(response.Cases);
        _selectedCase = _cases.FirstOrDefault(c => c.Id == _selectedCase?.Id);
        _selectedStep = _selectedCase?.Steps?.FirstOrDefault(s => s.Id == _selectedStep?.Id);
        _actualResponse = _selectedStep == null
            ? null
            : _actualResponse;

        StateHasChanged(); // Because _cases is not ObservableCollection
    }

    private async Task SelectCaseAsync(TestCase testCase)
    {
        _selectedCase = testCase;
        _selectedStep = testCase.Steps.FirstOrDefault();
        _actualResponse = null;
    }

    private async Task SelectStepAsync(TestCaseStep step)
    {
        if (_selectedCase?.Steps?.Contains(step) ?? false)
        {
            _selectedStep = step;
            _actualResponse = null;
        }
    }

    private async Task RunAsync(TestCase testCase)
    {
        try
        {
            _isExecuting = true;
            await SelectCaseAsync(testCase);

            using var client = new HttpClient();
            //client.DefaultRequestHeaders.Clear(); 
            var request = CreateRequestMessage(_selectedStep.Request);
            var sw = System.Diagnostics.Stopwatch.StartNew();
            using var response = await client.SendAsync(request, HttpCompletionOption.ResponseContentRead, _cts.Token);
            var content = await response.Content.ReadAsStringAsync();
            var headers = response.Headers.Concat(response.Content.Headers);
            _actualResponse = new HttpResponse(DateTime.UtcNow, headers, content, content.Length, response.StatusCode, sw.Elapsed.TotalMilliseconds);
        }
        finally
        {
            _cts = new System.Threading.CancellationTokenSource();
            _isExecuting = false;
        }
    }

    // Not sure! (It's my code)
    private HttpRequestMessage CreateRequestMessage(HttpRequest httpRequest)
    {
        var request = new HttpRequestMessage(new HttpMethod(httpRequest.Method), httpRequest.URI);
        if (httpRequest.Body != null)
        {
            request.Content = new StringContent(httpRequest.Body);
        }

        // Section 7.1 https://tools.ietf.org/html/rfc2616#page-38
        // https://docs.microsoft.com/en-us/previous-versions/visualstudio/hh138223(v=vs.118)?redirectedfrom=MSDN
        var contentHeaders = new string[]
        {
            "Allow",
            "Content-Encoding",
            "Content-Language",
            "Content-Length",
            "Content-Location",
            "Content-MD5",
            "Content-Range",
            "Content-Type",
            "Expires",
            "Last-Modified",
        };
        // To avoid System.FormatException: Cannot add value because header 'Content-Type' does not support multiple values
        request.Content.Headers.Clear();
        request.Headers.Clear();
        foreach (var header in httpRequest.Headers)
        {
            if (contentHeaders.Any(ch => ch.Equals(header.Key, StringComparison.OrdinalIgnoreCase)))
            {
                // Try Add so that to avoid: System.FormatException: The format of value 'application/json' is invalid.
                request.Content.Headers.TryAddWithoutValidation(header.Key, header.Value);
            }
            else
            {
#warning some headers arent get copied!
                request.Headers.TryAddWithoutValidation(header.Key, header.Value);
            }
        }

        return request;
    }

    private async Task CancelAsync()
    {
        _cts.Cancel();
    }
}