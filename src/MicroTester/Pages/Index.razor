@page "/"
@implements IDisposable
@inject IMicroTesterClient MicroTester;
@inject IEventHub EventHub;
@*(header + footer) https://www.codeply.com/go/ouc3hddx5i*@
@*Bootstrap builder (i didnt use it, but it can be usefull) https://bootstrapshuffle.com/editor?project=39ae79af9a6382e8d60cc3985cdb9536698bb012*@
<CascadingValue Name="@CascadingParameters.IsEnabled" Value="!_isExecuting">
    <div class="container-fluid h-100 d-flex flex-column">
        <div class="row flex-fill" style="min-height:0">
            <div class="col mh-100" style="overflow-y:scroll; max-width:350px; overflow-x:hidden;">
                @foreach (var testCaseContext in _context.Cases)
                {
                    var isSelected = testCaseContext == _context.SelectedCase;
                    var selectionClass = isSelected ? "selected" : "";

                    <div class="py-2 px-2 mx-n3 d-flex flex-row flex-fill @selectionClass" @onclick="() => SelectCaseAsync(testCaseContext)">
                        <span class="flex-column flex-grow-1">
                            @testCaseContext.TestCase.Name
                        </span>
                        <span class="flex-column flex-shrink-0 pl-2">
                            <TestCasePinSwitch TestCase="testCaseContext.TestCase" />

                            @if (!_isExecuting || !isSelected)
                            {
                                <InlineButton @onclick="() => ExecuteCaseAsync(testCaseContext)"><i class="fas fa-lg fa-play no-underline" /></InlineButton>
                            }
                            else
                            {
                                if (_cts.IsCancellationRequested)
                                {
                                    <span>Cancelling...</span>
                                }
                                else
                                {
                                    <CascadingValue Name="@CascadingParameters.IsEnabled" Value="true">
                                        <InlineButton @onclick="() => CancelAsync()"><i class="fas fa-lg fa-stop no-underline" /></InlineButton>
                                    </CascadingValue>
                                }
                            }
                        </span>
                    </div>
                }
            </div>

            <TestCaseRRRView Context="_context.SelectedCase" />
        </div>
    </div>
</CascadingValue>

@code{
    readonly RootContext _context = new RootContext();
    bool _isExecuting;
    System.Threading.CancellationTokenSource _cts = new System.Threading.CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        EventHub.CasesStateChangedAsync += LoadListAsync;
        await LoadListAsync();

        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        EventHub.CasesStateChangedAsync -= LoadListAsync;
    }

    private async Task LoadListAsync()
    {
        var request = new ListCasesRequest(0, 30);
        var response = await MicroTester.ListCasesAsync(request);
        // Merge just loaded cases with old ones so that to preserve selected case/step and outcomes
        _context.Reload(response.Cases);

        StateHasChanged(); // Because there are non-observable collection which were changed
    }

    private async Task SelectCaseAsync(TestCaseContext testCase)
    {
        _context.SelectedCase = testCase;
    }

    private async Task ExecuteCaseAsync(TestCaseContext testCase)
    {
        try
        {
            _isExecuting = true;

            // So that not to confuce with obsolete data in case of error
            foreach (var step in testCase.TestCase.Steps)
            {
                step.ActualResponse = null;
            }

            await SelectCaseAsync(testCase); // If wasn't

            foreach (var step in _context.SelectedCase.TestCase.Steps)
            {
                await ExecuteStepAsync(step);
            }
        }
        finally
        {
            _cts = new System.Threading.CancellationTokenSource();
            _isExecuting = false;
        }
    }

    private async Task ExecuteStepAsync(TestCaseStep step)
    {
        using var client = new HttpClient();
        var request = CreateRequestMessage(step.Request);
        var sw = System.Diagnostics.Stopwatch.StartNew();
        using var response = await client.SendAsync(request, HttpCompletionOption.ResponseContentRead, _cts.Token);
        var content = await response.Content.ReadAsStringAsync();
        var headers = response.Headers.Concat(response.Content.Headers);
        step.ActualResponse = new HttpResponse(DateTime.UtcNow, headers, content, content.Length, response.StatusCode, sw.Elapsed.TotalMilliseconds);
    }

    // Not sure! (It's my code)
    private HttpRequestMessage CreateRequestMessage(HttpRequest httpRequest)
    {
        var request = new HttpRequestMessage(new HttpMethod(httpRequest.Method), httpRequest.URI);
        if (httpRequest.Body != null)
        {
            request.Content = new StringContent(httpRequest.Body);
        }

        // Section 7.1 https://tools.ietf.org/html/rfc2616#page-38
        // https://docs.microsoft.com/en-us/previous-versions/visualstudio/hh138223(v=vs.118)?redirectedfrom=MSDN
        var contentHeaders = new string[]
        {
            "Allow",
            "Content-Encoding",
            "Content-Language",
            "Content-Length",
            "Content-Location",
            "Content-MD5",
            "Content-Range",
            "Content-Type",
            "Expires",
            "Last-Modified",
        };
        // To avoid System.FormatException: Cannot add value because header 'Content-Type' does not support multiple values
        if (request.Content != null)
        {
            request.Content.Headers.Clear();
        }
        request.Headers.Clear();
        foreach (var header in httpRequest.Headers)
        {
            if (contentHeaders.Any(ch => ch.Equals(header.Key, StringComparison.OrdinalIgnoreCase)))
            {
                // Try Add so that to avoid: System.FormatException: The format of value 'application/json' is invalid.
                request.Content.Headers.TryAddWithoutValidation(header.Key, header.Value);
            }
            else
            {
#warning some headers arent get copied!
                request.Headers.TryAddWithoutValidation(header.Key, header.Value);
            }
        }

        return request;
    }

    private async Task CancelAsync()
    {
        _cts.Cancel();
    }
}